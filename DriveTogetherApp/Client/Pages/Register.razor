@page "/register"
@inject IAuthService AuthService

<PageTitle>Register</PageTitle>
<h3>Registrieren</h3>

<EditForm Model  = "benutzer" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator/>
<div class="mb-3">
    <label for="email">Email</label>
    <InputText id="email" @bind-Value="benutzer.Email" class="form-control"/>
    <ValidationMessage For="@(() => benutzer.Email)"/>
</div>
<div class="mb-3">
    <label for="password">Passwort</label>
    <InputText id="password" @bind-Value="benutzer.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => benutzer.Password)" />
</div>

<div class="mb-3">
    <label for="confirmPassword">Neus Passwort bestätigen</label>
    <InputText id="confirmPassword" @bind-Value="benutzer.ConfirmPassword" class="form-control" type="password"/>
    <ValidationMessage For="@(() => benutzer.ConfirmPassword)" />
</div>
<button typeof="submit" class="btn btn-primary">Registrieren</button>
<div class="@messageCssClass">
        <span> </span>
</div>

</EditForm>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success">@message</div>
}

@code {
    BenutzerRegister benutzer = new BenutzerRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;


    async Task HandleRegistration()
    {
        var result = await AuthService.Register(benutzer);
        message = result.Message;
        if (result.Success)
        {
            messageCssClass = "text-success";
            message = "Benutzer erfolgreich erstellt";
        }
        else
        {
            messageCssClass = "text-danger";
            message = "Sorry etwas ging schief beim erstellen des Benutzers";
        }
    }
}
