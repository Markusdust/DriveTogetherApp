@page "/erstellen-fahrt"
@using System.Security.Claims
@inject IAutoService AutoService
@inject IFahrtService FahrtService
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="@fahrt" OnValidSubmit="HandleCreateFahrt">
    <!-- Formularfelder für Fahrt-Details -->
    <div class="mb-3">
        <label for="startdatum">Startdatum:</label>
        <InputDate id="startdatum" @bind-Value="fahrtDatum" />

        <label for="startzeit">Startzeit:</label>
        <input type="time" @bind="abfahrtZeit" @bind:format="HH:mm" />
    </div>
    
    <div class="mb-3">
        <label for="auto">Auto auswählen:</label>
        <InputSelect class="form-control" @bind-Value="fahrt.AutoId">
            <option value="">Bitte Auto auswählen</option>
            @foreach (var auto in autos)
            {
                <option value="@auto.AutoId">@auto.Marke @auto.Modell</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="anzahlSitzplaetze">Anzahl Sitzplätze:</label>
        <InputSelect id="anzahlSitzplaetze" @bind-Value="fahrt.AnzahlSitzplaetze">
            @for (int i = 1; i <= 10; i++)
            {
                <option value="@i">@i</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="preis">Preis in CHF (max. 10CHF):</label>
        <InputNumber id="preis" @bind-Value="fahrt.Preis" class="form-control" min="0" max="10" />

    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Fahrt erstellen </button>
    </div>

    
</EditForm>

@code {
    private Fahrt fahrt = new Fahrt();
    private List<Auto> autos = new List<Auto>();
    private string message = string.Empty;

    private DateTime fahrtDatum = DateTime.Today; // Setzt das aktuelle Datum
    private DateTime abfahrtZeit = DateTime.Now; // Setzt die aktuelle Uhrzeit

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            fahrt.BenutzerId = int.Parse(userId);

            var responseAuto = await AutoService.GetAutosByUserId(userId);
            if (responseAuto != null && responseAuto.Data != null)
            {
                autos = responseAuto.Data;
            }

            if (autos.Count > 0)
            {
                // Setzen Sie den Standardwert auf die ID des ersten Autos
                fahrt.AutoId = autos[0].AutoId;
            }
        }
    }

    private async Task HandleCreateFahrt()
    {
        Console.WriteLine("buttonsubmit");
        fahrt.Startdatum = new DateTime(fahrtDatum.Year, fahrtDatum.Month, fahrtDatum.Day, abfahrtZeit.Hour, abfahrtZeit.Minute, abfahrtZeit.Second);
        Console.WriteLine(fahrt.Startdatum);
        fahrt.Storniert = false;
        var result = await FahrtService.CreateFahrt(fahrt);
        if (result != null && result.Success)
        {
            message = "Fahrt erfolgreich erstellt.";
        }
        else
        {
            message = "Fehler: " + result.Message;
        }
    }
}
