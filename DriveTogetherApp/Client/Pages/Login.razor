@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Login</PageTitle>


<EditForm Model="benutzer" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="benutzer.Email" class="form-control" />
        <ValidationMessage For="@(() => benutzer.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="benutzer.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => benutzer.Password)" />
    </div>
    <button typeof="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>
@code {
    private BenutzerLogin benutzer = new BenutzerLogin();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(benutzer);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
