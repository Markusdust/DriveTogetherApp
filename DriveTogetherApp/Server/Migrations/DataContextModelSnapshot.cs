// <auto-generated />
using System;
using DriveTogetherApp.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriveTogetherApp.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DriveTogetherApp.Shared.Model.Auto", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<DateTime>("Baujahr")
                        .HasColumnType("datetime2");

                    b.Property<int>("BenutzerId")
                        .HasColumnType("int");

                    b.Property<string>("Farbe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kennzeichen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marke")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modell")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AutoId");

                    b.HasIndex("BenutzerId");

                    b.ToTable("Autos");

                    b.HasData(
                        new
                        {
                            AutoId = 1,
                            Baujahr = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenutzerId = 1,
                            Farbe = "Rot",
                            Kennzeichen = "B-MK 1234",
                            Marke = "Volkswagen",
                            Modell = "Polo",
                            Typ = "SUV"
                        },
                        new
                        {
                            AutoId = 2,
                            Baujahr = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenutzerId = 1,
                            Farbe = "Blau",
                            Kennzeichen = "B-MK 1234",
                            Marke = "Volkswagen",
                            Modell = "Golf",
                            Typ = "Limousine"
                        });
                });

            modelBuilder.Entity("DriveTogetherApp.Shared.Model.Benutzer", b =>
                {
                    b.Property<int>("BenutzerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenutzerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Geburtsdatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswortHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswortSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Registrierungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telefonnummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BenutzerId");

                    b.ToTable("Benutzers");

                    b.HasData(
                        new
                        {
                            BenutzerId = 1,
                            Email = "max.mustermann@example.com",
                            Geburtsdatum = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nachname = "Mustermann",
                            PasswortHash = new byte[0],
                            PasswortSalt = new byte[0],
                            Registrierungsdatum = new DateTime(2023, 12, 20, 15, 25, 36, 445, DateTimeKind.Local).AddTicks(9932),
                            Telefonnummer = "0123456789",
                            Vorname = "Max"
                        });
                });

            modelBuilder.Entity("DriveTogetherApp.Shared.Model.Auto", b =>
                {
                    b.HasOne("DriveTogetherApp.Shared.Model.Benutzer", "Benutzer")
                        .WithMany("Autos")
                        .HasForeignKey("BenutzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benutzer");
                });

            modelBuilder.Entity("DriveTogetherApp.Shared.Model.Benutzer", b =>
                {
                    b.Navigation("Autos");
                });
#pragma warning restore 612, 618
        }
    }
}
